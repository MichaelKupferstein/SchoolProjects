package edu.yu.da.tests;

import edu.yu.da.EdgeWeightedGraph;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * This class is used to generate a random graph with a specified number of edges.
 * The nodes of the graph are represented as unique strings.
 * This class was generated by ChatGPT and Github Copilot to help test my program. (Slightly modified)
 */
public class RandomGraphGenerator {
    private final int edges;
    private final Random random = new Random();

    /**
     * Constructor for the RandomGraphGenerator class.
     * @param edges The number of edges to be added to the graph.
     */
    public RandomGraphGenerator(int edges) {
        this.edges = edges;
    }

    /**
     * This method generates a random graph with the specified number of edges.
     * Each edge is added between two randomly selected nodes from a pool of nodes, and has a random weight.
     * @return The generated graph.
     */
    public EdgeWeightedGraph generate() {
        EdgeWeightedGraph graph = new EdgeWeightedGraph();

        // Create a pool of nodes
        List<String> nodes = new ArrayList<>();
        for (int i = 0; i < edges; i++) {
            nodes.add("Node " + i);
        }

        // Add edges to the graph
        for (int i = 0; i < edges; i++) {
            // Select two random nodes from the pool
            String v = nodes.get(random.nextInt(nodes.size()));
            String w = nodes.get(random.nextInt(nodes.size()));
            while (v.equals(w) || graph.edgeExists(v,w)) { // Ensure we have two distinct nodes and no edges exist between them
                w = nodes.get(random.nextInt(nodes.size()));
            }

            double weight = 1 + (15 - 1) * random.nextDouble();
            graph.addEdge(v, w, Math.round(weight));
        }

        return graph;
    }
}